name: Android CI Release

on:
  push:
    branches:
      - master
    tags:        
      - v*
  workflow_dispatch:
    inputs:
      version_update:
        type: choice
        description: What version should be used
        default: patch
        options: 
        - patch
        - minor
        - major

env:
  java_version: '17'
  ruby_version: '2.7.2'
  version_update: ${{ inputs.version_update != '' && inputs.version_update || 'patch'  }}
  
jobs:
  android-internal:
    name: Google Play internal
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.ruby_version }}
          bundler-cache: true

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.java_version }}
          cache: 'gradle'

      - uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version-file: pubspec.yaml
          
      - name: Flutter pub dependencies
        run: flutter pub get
        
      - name: Flutter add intl and run build_runner
        run: | 
          flutter pub add intl_utils
          flutter pub run intl_utils:generate
          flutter pub run build_runner build

      - name: Configure Keystore
        env:
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
          KEYSTORE_KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEYSTORE_KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
          KEYSTORE_STORE_PASSWORD: ${{ secrets.STORE_PASSWORD }}
        run: |
          mkdir -p ~/android
          echo "$PRIVATE_KEY" > AN_key.p12.b64
          base64 -d -i AN_key.p12.b64 > android/AN_key.p12
          echo "storeFile=../AN_key.p12" >> android/key.properties
          echo "keyAlias=$KEYSTORE_KEY_ALIAS" >> android/key.properties
          echo "storePassword=$KEYSTORE_STORE_PASSWORD" >> android/key.properties
          echo "keyPassword=$KEYSTORE_KEY_PASSWORD" >> android/key.properties

      - name: Create Google Play Config file
        id: createServiceAccount
        run: echo '${{ secrets.PLAY_STORE_KEY }}' > android/api-play-store-key.json
      
      - name: Create Firebase Configuration Files forn Native / Flutter
        env:
            GOOGLE_SERVICES_ANDROID: ${{ secrets.GOOGLE_SERVICES_ANDROID_JSON }}
            GOOGLE_SERVICES_IOS: ${{ secrets.GOOGLE_SERVICES_IOS_PLIST }}
            FIREBASE_APP_ID_IOS: ${{ secrets.FIREBASE_APP_ID_IOS_JSON }}
            FIREBASE_OPTIONS_DART: ${{ secrets.FIREBASE_OPTIONS_DART }}
        run: |
            echo Android google_services.json
            echo "$GOOGLE_SERVICES_ANDROID" > google-services.json.b64
            base64 -d -i google-services.json.b64 > android/app/google-services.json
            echo iOS google_services.json
            echo "$GOOGLE_SERVICES_IOS" > GoogleService-Info.plist.b64
            base64 -d -i GoogleService-Info.plist.b64 > ios/Runner/GoogleService-Info.plist
            echo iOS Firebase APP ID
            echo "$FIREBASE_APP_ID_IOS" > firebase_app_id_file.json.b64
            base64 -d -i firebase_app_id_file.json.b64 > ios/firebase_app_id_file.json
            echo Firebase .dart file
            echo "$FIREBASE_OPTIONS_DART" > FIREBASE_OPTIONS_DART.dart.b64
            base64 -d -i FIREBASE_OPTIONS_DART.dart.b64 > lib/firebase_options.dart
      
      - name: Play Store Build Number
        id: versioning
        uses: lukasa1993/android-version-code-update@v2.1.0
        with:
          serviceAccountJson: android/api-play-store-key.json
          packageName: com.dartz.amiibo_network
      
      - name: 'Get next version'
        id: semvers
        uses: "WyriHaximus/github-action-next-semvers@v1"
        with:
          version: ${{ vars.BUILD_VERSION }}
      
      - name: Set new version number
        id: update_version_number
        shell: bash
        env:
          VERSION: ${{ env.version_update }}
        run: |
          if [[ $VERSION == 'patch' ]]; then
            N_VERSION_NUMBER=${{ steps.semvers.outputs.patch }}
          elif [[ $VERSION == 'minor' ]]; then
            N_VERSION_NUMBER=${{ steps.semvers.outputs.minor }}
          else
            N_VERSION_NUMBER=${{ steps.semvers.outputs.major }}
          fi
          echo "next_version_number=$N_VERSION_NUMBER" >> $GITHUB_ENV
          echo "version=$N_VERSION_NUMBER+${{ steps.versioning.outputs.next_version }}" >> $GITHUB_ENV
      
      - name: Build apk and appbundle
        env:
          AMAZON_TAG: ${{ secrets.AMAZON_TAG }}
          build_number: ${{ steps.versioning.outputs.next_version }}
          version_number: ${{ env.next_version_number }}
        run: |
          flutter build apk --build-number=$build_number --build-name=$version_number --no-pub --release --obfuscate --split-debug-info=build/app/outputs/apk-symbols/symbols --dart-define=amazon_tag=$AMAZON_TAG
          flutter build appbundle --build-number=$build_number --build-name=$version_number --no-pub --obfuscate --split-debug-info=build/app/outputs/aab-symbols/symbols --dart-define=amazon_tag=$AMAZON_TAG

      - name: Upload aab symbols to firebase
        uses: w9jds/firebase-action@8354b09806f3107c9a27e22ec444f60452608104
        with:
          args: crashlytics:symbols:upload --app=${{ secrets.FIREBASE_ANDROID_APP_ID }} build/app/outputs/aab-symbols/symbols
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

      - name: Build appbundle and upload to google play
        run: bundle exec fastlane android internal

      - uses: rmeneely/update-yaml@v1
        with:
          infile: pubspec.yaml
          varlist: 'version=${{ env.version }}'
      
      - name: Update version in pubspec
        run: |
          git config --global user.name '${{ secrets.USERNAME }}'
          git config --global user.email '${{ secrets.EMAIL }}'
          git commit -am "[skip ci] Automated new version: ${{ env.version }}"
          git push
      
      - name: update semvar variable
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          version_number: ${{ env.next_version_number }}
        run: gh variable set BUILD_VERSION -b "$version_number"
      
      - name: Create Github Release
        uses: softprops/action-gh-release@v2
        with:
          token: "${{ secrets.GITHUB_TOKEN }}"
          tag_name: "${{ env.version }}"
          draft: true
          prerelease: true
          files: build/app/outputs/flutter-apk/app-release.apk
